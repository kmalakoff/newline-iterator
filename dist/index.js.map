{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import indexOfNewline from \"index-of-newline\";\n\n/**\n * String iterator CR, LF, or CRLF\n *\n * @param string The string to iterate through\n */\nexport default class NewlineIterator {\n  protected string: string;\n  protected offset: number;\n\n  constructor(string: string) {\n    this.string = string;\n    this.offset = 0;\n  }\n\n  /**\n   * Get the next line if it exists\n   *\n   * @return The next line or null if there are no more lines\n   */\n  next(): string | null {\n    if (this.offset >= this.string.length) return null;\n    let [index, skip] = indexOfNewline(this.string, this.offset, true) as number[];\n    if (index < 0) {\n      index = this.string.length - this.offset;\n      skip = 0;\n    }\n    const line = this.string.substr(this.offset, index - this.offset);\n    this.offset = index + skip;\n    return line;\n  }\n\n  [Symbol.iterator](): Iterator<string> {\n    return {\n      next: (): IteratorResult<string> => {\n        const result = this.next();\n        return result === null ? { value: undefined, done: true } : { value: result, done: false };\n      },\n    };\n  }\n}\n"],"names":["NewlineIterator","string","offset","this","next","length","indexOfNewline","index","skip","line","substr","result","_this","value","undefined","done","Symbol","iterator"],"mappings":"oCAOqBA,cAInB,WAAYC,QAHFA,mBACAC,cAGRC,KAAKF,OAASA,EACdE,KAAKD,OAAS,6BAQhBE,KAAA,WACE,GAAID,KAAKD,QAAUC,KAAKF,OAAOI,OAAQ,YACvC,MAAoBC,EAAeH,KAAKF,OAAQE,KAAKD,QAAQ,GAAxDK,OAAOC,OACRD,EAAQ,IACVA,EAAQJ,KAAKF,OAAOI,OAASF,KAAKD,OAClCM,EAAO,GAET,IAAMC,EAAON,KAAKF,OAAOS,OAAOP,KAAKD,OAAQK,EAAQJ,KAAKD,QAE1D,OADAC,KAAKD,OAASK,EAAQC,EACfC,QAGT,sBACE,MAAO,CACLL,KAAM,WACJ,IAAMO,EAASC,EAAKR,OACpB,OAAkB,OAAXO,EAAkB,CAAEE,WAAOC,EAAWC,MAAM,GAAS,CAAEF,MAAOF,EAAQI,MAAM,SAJxFC,OAAOC"}