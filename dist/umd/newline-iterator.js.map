{"version":3,"file":"newline-iterator.js","sources":["../../src/index.ts"],"sourcesContent":["import indexOfNewline from 'index-of-newline';\n\nconst hasIterator = typeof Symbol !== 'undefined' && Symbol.iterator;\n\n/**\n * Create a newline iterator recognizing CR, LF, and CRLF using the Symbol.iterator interface\n *\n * @param string The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */\nexport default function newlineIterator(string: string): IterableIterator<string> {\n  let offset = 0;\n  const iterator = {\n    next(): IteratorResult<string, boolean> {\n      if (offset >= string.length) return { value: undefined, done: true };\n      const args = indexOfNewline(string, offset, true) as number[];\n      let index = args[0];\n      let skip = args[1];\n      if (index < 0) {\n        index = string.length;\n        skip = 0;\n      }\n      const line = string.substr(offset, index - offset);\n      offset = index + skip;\n      return { value: line, done: false };\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.iterator] = function (): Iterator<string> {\n      return this;\n    };\n  }\n\n  return iterator as IterableIterator<string>;\n}\n"],"names":["hasIterator","Symbol","iterator","newlineIterator","string","offset","next","length","value","undefined","done","args","indexOfNewline","index","skip","line","substr"],"mappings":";;;;;;EAEA,IAAMA,WAAc,GAAA,OAAOC,MAAW,KAAA,WAAA,IAAeA,OAAOC,QAAQ,CAAA;EAEpE;;;;;;;;;;;;;MAce,SAASC,eAAAA,CAAgBC,MAAc,EAAA;EACpD,IAAA,IAAIC,MAAS,GAAA,CAAA,CAAA;EACb,IAAA,IAAMH,QAAW,GAAA;EACfI,QAAAA,IAAAA,EAAAA,SAAAA,IAAAA,GAAAA;EACE,YAAA,IAAID,MAAUD,IAAAA,MAAAA,CAAOG,MAAM,EAAE,OAAO;kBAAEC,KAAOC,EAAAA,SAAAA;kBAAWC,IAAM,EAAA,IAAA;EAAK,aAAA,CAAA;cACnE,IAAMC,IAAAA,GAAOC,cAAeR,CAAAA,MAAAA,EAAQC,MAAQ,EAAA,IAAA,CAAA,CAAA;cAC5C,IAAIQ,KAAAA,GAAQF,IAAI,CAAC,CAAE,CAAA,CAAA;cACnB,IAAIG,IAAAA,GAAOH,IAAI,CAAC,CAAE,CAAA,CAAA;EAClB,YAAA,IAAIE,QAAQ,CAAG,EAAA;EACbA,gBAAAA,KAAAA,GAAQT,OAAOG,MAAM,CAAA;kBACrBO,IAAO,GAAA,CAAA,CAAA;EACT,aAAA;EACA,YAAA,IAAMC,IAAOX,GAAAA,MAAAA,CAAOY,MAAM,CAACX,QAAQQ,KAAQR,GAAAA,MAAAA,CAAAA,CAAAA;EAC3CA,YAAAA,MAAAA,GAASQ,KAAQC,GAAAA,IAAAA,CAAAA;cACjB,OAAO;kBAAEN,KAAOO,EAAAA,IAAAA;kBAAML,IAAM,EAAA,KAAA;EAAM,aAAA,CAAA;EACpC,SAAA;EACF,KAAA,CAAA;EAEA,IAAA,IAAIV,WAAa,EAAA;EACfE,QAAAA,QAAQ,CAACD,MAAAA,CAAOC,QAAQ,CAAC,GAAG,WAAA;EAC1B,YAAA,OAAO,IAAI,CAAA;EACb,SAAA,CAAA;EACF,KAAA;MAEA,OAAOA,QAAAA,CAAAA;EACT;;;;;;;;"}