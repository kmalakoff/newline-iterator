{"version":3,"file":"newline-iterator.js","sources":["../../node_modules/index-of-newline/dist/esm/index.mjs","../../src/index.ts"],"sourcesContent":["/**\n * Find indexOf CR, LF, or CRLF\n *\n * @param string The search string\n * @param offset The offset for searching\n * @param includeLength Include the length in the return value\n * @returns When includeLength is true, returns a pair of [offset, length] to provide the length of CR (1), LF (1) or CRLF (2)\n */ export default function indexOfNewline(string) {\n    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, includeLength = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    if (offset < 0) throw new Error(\"Unexpected negative offset\");\n    if (offset > string.length) throw new Error(\"Offset is longer than the string. Offset: \".concat(offset, \". String: \").concat(string.length));\n    while(offset < string.length){\n        var value = string[offset];\n        if (value === \"\\n\") return includeLength ? [\n            offset,\n            1\n        ] : offset;\n        else if (value === \"\\r\") {\n            return includeLength ? [\n                offset,\n                string[offset + 1] === \"\\n\" ? 2 : 1\n            ] : offset;\n        }\n        offset++;\n    }\n    return includeLength ? [\n        -1,\n        0\n    ] : -1;\n};\n","import indexOfNewline from 'index-of-newline';\n\nconst hasIterator = typeof Symbol !== 'undefined' && Symbol.iterator;\n\n/**\n * Create a newline iterator recognizing CR, LF, and CRLF using the Symbol.iterator interface\n *\n * @param string The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */\nexport default function newlineIterator(string: string): IterableIterator<string> {\n  let offset = 0;\n  const iterator = {\n    next(): IteratorResult<string, boolean> {\n      if (offset >= string.length) return { value: undefined, done: true };\n      let [index, skip] = indexOfNewline(string, offset, true) as number[];\n      if (index < 0) {\n        index = string.length;\n        skip = 0;\n      }\n      const line = string.substr(offset, index - offset);\n      offset = index + skip;\n      return { value: line, done: false };\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.iterator] = function (): Iterator<string> {\n      return this;\n    };\n  }\n\n  return iterator as IterableIterator<string>;\n}\n"],"names":["hasIterator","Symbol","iterator","newlineIterator","string","offset","next","length","value","undefined","done","indexOfNewline","index","skip","line","substr"],"mappings":"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"}