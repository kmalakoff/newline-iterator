{"version":3,"file":"newline-iterator.js","sources":["../../node_modules/index-of-newline/dist/esm/index.mjs","../../src/index.ts"],"sourcesContent":["/**\n * Find indexOf CR, LF, or CRLF\n *\n * @param string The search string\n * @param offset The offset for searching\n * @param includeLength Include the length in the return value\n * @returns When includeLength is true, returns a pair of [offset, length] to provide the length of CR (1), LF (1) or CRLF (2)\n */ export default function indexOfNewline(string, offset = 0, includeLength = false) {\n    if (offset < 0) throw new Error('Unexpected negative offset');\n    if (offset > string.length) throw new Error(`Offset is longer than the string. Offset: ${offset}. String: ${string.length}`);\n    while(offset < string.length){\n        const value = string[offset];\n        if (value === '\\n') return includeLength ? [\n            offset,\n            1\n        ] : offset;\n        else if (value === '\\r') {\n            return includeLength ? [\n                offset,\n                string[offset + 1] === '\\n' ? 2 : 1\n            ] : offset;\n        }\n        offset++;\n    }\n    return includeLength ? [\n        -1,\n        0\n    ] : -1;\n};\n","import indexOfNewline from 'index-of-newline';\n\nconst hasIterator = typeof Symbol !== 'undefined' && Symbol.iterator;\n\n/**\n * Create a newline iterator recognizing CR, LF, and CRLF using the Symbol.iterator interface\n *\n * @param string The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */\nexport default function newlineIterator(string: string): IterableIterator<string> {\n  let offset = 0;\n  const iterator = {\n    next(): IteratorResult<string, boolean> {\n      if (offset >= string.length) return { value: undefined, done: true };\n      let [index, skip] = indexOfNewline(string, offset, true) as number[];\n      if (index < 0) {\n        index = string.length;\n        skip = 0;\n      }\n      const line = string.substr(offset, index - offset);\n      offset = index + skip;\n      return { value: line, done: false };\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.iterator] = function (): Iterator<string> {\n      return this;\n    };\n  }\n\n  return iterator as IterableIterator<string>;\n}\n"],"names":["indexOfNewline","string","offset","includeLength","Error","length","value","hasIterator","Symbol","iterator","newlineIterator","next","undefined","done","index","skip","line","substr"],"mappings":"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"}