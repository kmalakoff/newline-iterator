{"version":3,"file":"newline-iterator.js","sources":["../../node_modules/index-of-newline/dist/esm/index.mjs","../../src/index.ts"],"sourcesContent":["/**\n * Find indexOf CR, LF, or CRLF\n *\n * @param string The search string\n * @param offset The offset for searching\n * @param includeLength Include the length in the return value\n * @returns When includeLength is true, returns a pair of [offset, length] to provide the length of CR (1), LF (1) or CRLF (2)\n */ export default function indexOfNewline(string, offset = 0, includeLength = false) {\n    if (offset < 0) throw new Error('Unexpected negative offset');\n    if (offset > string.length) throw new Error(`Offset is longer than the string. Offset: ${offset}. String: ${string.length}`);\n    while(offset < string.length){\n        const value = string[offset];\n        if (value === '\\n') return includeLength ? [\n            offset,\n            1\n        ] : offset;\n        else if (value === '\\r') {\n            return includeLength ? [\n                offset,\n                string[offset + 1] === '\\n' ? 2 : 1\n            ] : offset;\n        }\n        offset++;\n    }\n    return includeLength ? [\n        -1,\n        0\n    ] : -1;\n};\n","import indexOfNewline from 'index-of-newline';\n\nconst hasIterator = typeof Symbol !== 'undefined' && Symbol.iterator;\n\n/**\n * Create a newline iterator recognizing CR, LF, and CRLF using the Symbol.iterator interface\n *\n * @param string The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */\nexport default function newlineIterator(string: string): IterableIterator<string> {\n  let offset = 0;\n  const iterator = {\n    next(): IteratorResult<string, boolean> {\n      if (offset >= string.length) return { value: undefined, done: true };\n      const args = indexOfNewline(string, offset, true) as number[];\n      let index = args[0];\n      let skip = args[1];\n      if (index < 0) {\n        index = string.length;\n        skip = 0;\n      }\n      const line = string.substr(offset, index - offset);\n      offset = index + skip;\n      return { value: line, done: false };\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.iterator] = function (): Iterator<string> {\n      return this;\n    };\n  }\n\n  return iterator as IterableIterator<string>;\n}\n"],"names":["indexOfNewline","string","offset","includeLength","Error","length","value","hasIterator","Symbol","iterator","newlineIterator","next","undefined","done","args","index","skip","line","substr"],"mappings":"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"}