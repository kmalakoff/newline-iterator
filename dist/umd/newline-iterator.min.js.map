{"version":3,"file":"newline-iterator.min.js","sources":["../../src/index.ts"],"sourcesContent":["import indexOfNewline from \"index-of-newline\";\n\n/**\n * Create a newlinw iterator recognizing CR, LF, and CRLF using the Symbol.iterator interface\n *\n * @param string The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */\nexport default function newlineIterator(string: string): IterableIterator<string> {\n  let offset = 0;\n  return {\n    next(): IteratorResult<string, boolean> {\n      if (offset >= string.length) return { value: undefined, done: true };\n      let [index, skip] = indexOfNewline(string, offset, true) as number[];\n      if (index < 0) {\n        index = string.length - offset;\n        skip = 0;\n      }\n      const line = string.substr(offset, index - offset);\n      offset = index + skip;\n      return { value: line, done: false };\n    },\n    [Symbol.iterator](): Iterator<string> {\n      return this;\n    },\n  } as IterableIterator<string>;\n}\n"],"names":["string","offset","next","length","value","undefined","done","indexOfNewline","index","skip","line","substr","Symbol","iterator","this"],"mappings":"21CAgBe,SAAyBA,aAClCC,EAAS,YAEXC,mBACMD,GAAUD,EAAOG,OAAQ,MAAO,CAAEC,WAAOC,EAAWC,MAAM,WAC1CC,UAAeP,EAAQC,GAAQ,MAA9CO,OAAOC,OACRD,EAAQ,IACVA,EAAQR,EAAOG,OAASF,EACxBQ,EAAO,OAEHC,EAAOV,EAAOW,OAAOV,EAAQO,EAAQP,UAC3CA,EAASO,EAAQC,EACV,CAAEL,MAAOM,EAAMJ,MAAM,OAE7BM,OAAOC,6BACCC"}