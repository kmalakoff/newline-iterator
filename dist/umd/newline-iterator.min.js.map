{"version":3,"file":"newline-iterator.min.js","sources":["../../src/index.ts"],"sourcesContent":["import indexOfNewline from 'index-of-newline';\n\nconst hasIterator = typeof Symbol !== 'undefined' && Symbol.iterator;\n\n/**\n * Create a newline iterator recognizing CR, LF, and CRLF using the Symbol.iterator interface\n *\n * @param string The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */\nexport default function newlineIterator(string: string): IterableIterator<string> {\n  let offset = 0;\n  const iterator = {\n    next(): IteratorResult<string, boolean> {\n      if (offset >= string.length) return { value: undefined, done: true };\n      const args = indexOfNewline(string, offset, true) as number[];\n      let index = args[0];\n      let skip = args[1];\n      if (index < 0) {\n        index = string.length;\n        skip = 0;\n      }\n      const line = string.substr(offset, index - offset);\n      offset = index + skip;\n      return { value: line, done: false };\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.iterator] = function (): Iterator<string> {\n      return this;\n    };\n  }\n\n  return iterator as IterableIterator<string>;\n}\n"],"names":["hasIterator","Symbol","iterator","string","offset","next","length","value","undefined","done","args","indexOfNewline","index","skip","line","substr","this"],"mappings":"iTAEA,IAAMA,EAAgC,oBAAXC,QAA0BA,OAAOC,gBAgB7C,SAAyBC,GACtC,IAAIC,EAAS,EACPF,EAAW,CACfG,KAAAA,WACE,GAAID,GAAUD,EAAOG,OAAQ,MAAO,CAAEC,WAAOC,EAAWC,MAAM,GAC9D,IAAMC,EAAOC,EAAeR,EAAQC,GAAQ,GACxCQ,EAAQF,EAAK,GACbG,EAAOH,EAAK,GACZE,EAAQ,IACVA,EAAQT,EAAOG,OACfO,EAAO,GAET,IAAMC,EAAOX,EAAOY,OAAOX,EAAQQ,EAAQR,GAE3C,OADAA,EAASQ,EAAQC,EACV,CAAEN,MAAOO,EAAML,MAAM,EAC9B,GASF,OANIT,IACFE,EAASD,OAAOC,UAAY,WAC1B,OAAOc,IACT,GAGKd,CACT"}