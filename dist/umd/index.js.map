{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["import indexOfNewline from \"index-of-newline\";\n\n/**\n * String iterator CR, LF, or CRLF\n *\n * @param string The string to iterate through\n */\nexport default class NewlineIterator {\n  protected string: string;\n  protected offset: number;\n\n  constructor(string: string) {\n    this.string = string;\n    this.offset = 0;\n  }\n\n  /**\n   * Get the next line if it exists\n   *\n   * @return The next line or null if there are no more lines\n   *\n   * ```typescript\n   * import NewlineIterator from \"newline-iterator\";\n   *\n   * const iterator = new NewlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n   * console.log(iterator.next()); // \"some\"\n   * console.log(iterator.next()); // \"string\"\n   * console.log(iterator.next()); // \"combination\"\n   * console.log(iterator.next()); // null\n   * ```\n   */\n  next(): string | null {\n    if (this.offset >= this.string.length) return null;\n    let [index, skip] = indexOfNewline(this.string, this.offset, true) as number[];\n    if (index < 0) {\n      index = this.string.length - this.offset;\n      skip = 0;\n    }\n    const line = this.string.substr(this.offset, index - this.offset);\n    this.offset = index + skip;\n    return line;\n  }\n\n  /**\n   * Generates an iterator using the Symbol.iterator interface\n   *\n   * ```typescript\n   * import NewlineIterator from \"newline-iterator\";\n   *\n   * const iterator = new NewlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n   * const results = [];\n   * for (const line of iterator) results.push(line);\n   * console.log(results); // [\"some\", \"string\", \"combination\"];\n   * ```\n   */\n  [Symbol.iterator](): Iterator<string> {\n    return {\n      next: (): IteratorResult<string> => {\n        const result = this.next();\n        return result === null ? { value: undefined, done: true } : { value: result, done: false };\n      },\n    };\n  }\n}\n"],"names":["Symbol","iterator","constructor","string","offset","next","this","length","indexOfNewline","index","skip","line","substr","result","value","undefined","done"],"mappings":"o9CAuDGA,OAAOC,gBAhDK,MAIbC,YAAYC,wDACLA,OAASA,OACTC,OAAS,EAkBhBC,UACMC,KAAKF,QAAUE,KAAKH,OAAOI,OAAQ,OAAO,aAC1BC,UAAeF,KAAKH,OAAQG,KAAKF,QAAQ,MAAxDK,OAAOC,OACRD,EAAQ,IACVA,EAAQH,KAAKH,OAAOI,OAASD,KAAKF,OAClCM,EAAO,SAEHC,EAAOL,KAAKH,OAAOS,OAAON,KAAKF,OAAQK,EAAQH,KAAKF,oBACrDA,OAASK,EAAQC,EACfC,cAgBA,CACLN,KAAM,WACEQ,EAASP,KAAKD,cACF,OAAXQ,EAAkB,CAAEC,WAAOC,EAAWC,MAAM,GAAS,CAAEF,MAAOD,EAAQG,MAAM"}