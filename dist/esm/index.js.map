{"version":3,"sources":["../../src/index.ts"],"names":["indexOfNewline","hasIterator","Symbol","iterator","newlineIterator","string","offset","next","length","value","undefined","done","index","skip","line","substr"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,WAAW,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,QAA5D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,eAAT,CAAyBC,MAAzB,EAAmE;AAChF,MAAIC,MAAM,GAAG,CAAb;AACA,QAAMH,QAAQ,GAAG;AACfI,IAAAA,IAAI,GAAoC;AACtC,UAAID,MAAM,IAAID,MAAM,CAACG,MAArB,EAA6B,OAAO;AAAEC,QAAAA,KAAK,EAAEC,SAAT;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAAP;AAC7B,UAAI,CAACC,KAAD,EAAQC,IAAR,IAAgBb,cAAc,CAACK,MAAD,EAASC,MAAT,EAAiB,IAAjB,CAAlC;;AACA,UAAIM,KAAK,GAAG,CAAZ,EAAe;AACbA,QAAAA,KAAK,GAAGP,MAAM,CAACG,MAAP,GAAgBF,MAAxB;AACAO,QAAAA,IAAI,GAAG,CAAP;AACD;;AACD,YAAMC,IAAI,GAAGT,MAAM,CAACU,MAAP,CAAcT,MAAd,EAAsBM,KAAK,GAAGN,MAA9B,CAAb;AACAA,MAAAA,MAAM,GAAGM,KAAK,GAAGC,IAAjB;AACA,aAAO;AAAEJ,QAAAA,KAAK,EAAEK,IAAT;AAAeH,QAAAA,IAAI,EAAE;AAArB,OAAP;AACD;;AAXc,GAAjB;;AAcA,MAAIV,WAAJ,EAAiB;AACfE,IAAAA,QAAQ,CAACD,MAAM,CAACC,QAAR,CAAR,GAA4B,YAA8B;AACxD,aAAO,IAAP;AACD,KAFD;AAGD;;AAED,SAAOA,QAAP;AACD","sourcesContent":["import indexOfNewline from \"index-of-newline\";\n\nconst hasIterator = typeof Symbol !== \"undefined\" && Symbol.iterator;\n\n/**\n * Create a newlinw iterator recognizing CR, LF, and CRLF using the Symbol.iterator interface\n *\n * @param string The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */\nexport default function newlineIterator(string: string): IterableIterator<string> {\n  let offset = 0;\n  const iterator = {\n    next(): IteratorResult<string, boolean> {\n      if (offset >= string.length) return { value: undefined, done: true };\n      let [index, skip] = indexOfNewline(string, offset, true) as number[];\n      if (index < 0) {\n        index = string.length - offset;\n        skip = 0;\n      }\n      const line = string.substr(offset, index - offset);\n      offset = index + skip;\n      return { value: line, done: false };\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.iterator] = function (): Iterator<string> {\n      return this;\n    };\n  }\n\n  return iterator as IterableIterator<string>;\n}\n"],"file":"index.js"}